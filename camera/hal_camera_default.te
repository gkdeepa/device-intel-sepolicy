vndbinder_use(hal_camera_default)
not_full_treble(`
  binder_call(hal_camera_default, surfaceflinger)
')
binder_call(hal_camera_default, hal_graphics_allocator_default)
binder_call(hal_camera_default, hal_graphics_composer_default)

get_prop(hal_camera_default, vendor_cam_flash_thrtl_prop)
set_prop(hal_camera_default, vendor_camera_prop)

allow hal_camera_default gpu_device:chr_file rw_file_perms;
allow hal_camera_default hal_graphics_allocator_default_tmpfs:file { read write map };
allow hal_camera_default sysfs:dir r_dir_perms;
allow hal_camera_default sysfs:file r_file_perms;
allow hal_camera_default hal_graphics_composer_default:fd use;
allow hal_graphics_composer_default hal_camera_default:fd use;
allow hal_camera_default hwservicemanager:chr_file rw_file_perms;
allow hal_camera_default gpu_device:dir search;

allow hal_camera_default hal_graphics_mapper_hwservice:hwservice_manager find;
hal_client_domain(hal_camera_default, hal_graphics_allocator)

not_full_treble(`
  allow hal_camera_default surfaceflinger_service:service_manager find;
')
allow hal_camera_default self:global_capability_class_set sys_nice;

allow hal_camera_default self:socket create_socket_perms;
allow hal_camera_default self:tcp_socket create_socket_perms;

allow hal_camera_default self:tcp_socket { create read write connect name_connect getopt setopt };
allow hal_camera_default self:socket { create read write connect name_connect getopt setopt };

allow hal_camera_default default_prop:file { open read };
allow hal_camera_default vndbinder_device:chr_file { ioctl map open read write };

allow hal_camera_default self:socket create_socket_perms;
allowxperm hal_camera_default self:socket ioctl unpriv_sock_ioctls;

userdebug_or_eng(`
    permissive hal_camera_default;
    dontaudit hal_camera_default default_prop:file { open read getattr map };
    dontaudit hal_camera_default port:tcp_socket { name_connect };
    dontaudit hal_camera_default self:tcp_socket { create read write connect name_connect getopt setopt };
')
